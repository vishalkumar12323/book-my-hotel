generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(uuid())
  name     String    @map("user_name")
  email    String    @unique @map("user_email")
  password String    @map("user_password")
  roles    Role[]    @default([CUSTOMER]) @map("user_roles")
  Listing  Listing[]
  Booking  Booking[]
  Review   Review[]
  Session  Session?

  @@map("users")
}

enum Role {
  CUSTOMER
  VENDOR
  ADMIN
}

model Listing {
  id           String      @id @default(uuid())
  vendorId     String
  type         ListingType
  name         String
  address      String
  description  String
  facilities   String[]
  price        Float
  rating       Float
  coverImageId String?     @map("cover_image_id")
  images       String[]    @map("images_id")
  units        Unit[]
  vendor       User        @relation(fields: [vendorId], references: [id])
  Booking      Booking[]
  createdAt    DateTime    @default(now())

  @@map("listings")
}

enum ListingType {
  HOTEL
  RESTAURANT
}

model RoomFacilities {
  id            String  @id @default(uuid())
  unitId        String  @unique @map("unit_id")
  wifi          Boolean
  ac            Boolean
  tv            Boolean
  waterPurifier Boolean
  twineBed      Boolean
  cityView      Boolean
  bathroom      Boolean
  kitchen       Boolean
  unit          Unit    @relation(fields: [unitId], references: [id])

  @@map("room_facilities")
}

model Unit {
  id            String          @id @default(uuid())
  listingId     String
  type          String
  capacity      Int
  originalPrice Float
  discountPrice Float
  available     Boolean
  listing       Listing         @relation(fields: [listingId], references: [id])
  roomFacility  RoomFacilities?
  Booking       Booking[]
  createdAt     DateTime        @default(now())

  @@map("units")
}

model Booking {
  id         String        @id @default(uuid())
  customerId String
  listingId  String
  unitId     String
  startDate  DateTime
  endDate    DateTime
  status     BookingStatus
  customer   User          @relation(fields: [customerId], references: [id])
  listing    Listing       @relation(fields: [listingId], references: [id])
  unit       Unit          @relation(fields: [unitId], references: [id])

  Review    Review[]
  createdAt DateTime @default(now())

  @@map("bookings")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model Review {
  id         String   @id @default(uuid())
  bookingId  String
  customerId String
  rating     Int
  comments   String
  createdAt  DateTime @default(now())
  booking    Booking  @relation(fields: [bookingId], references: [id])
  customer   User     @relation(fields: [customerId], references: [id])

  @@map("reviews")
}

model Session {
  id           String   @id @default(uuid())
  refreshToken String   @unique @map("refresh_token")
  userId       String   @unique @map("user_id")
  expiresAt    DateTime
  user         User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}
